APPENDIX
/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.0 Professional
Automatic Program Generator
Â© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 28-08-2016
Author  : NeVaDa
Company : 
Comments: 


Chip type               : ATmega32A
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*****************************************************/

#include <mega32a.h>
// Alphanumeric LCD Module functions
#include <alcd.h>
#include <delay.h>
#include <stdlib.h>
#include <string.h>                            
char array[]={'#','E','T','I','A','N','M','S','U','R','W','D','K','G','O','H','V','F','#','L','#','P','J','B','X',
'C','Y','Z','Q','#','#','5','4','#','3','#','#','#','2','#','#','+','#','#','#','#','1','6','','/','#','#','#','#','#','7','#','#','#','8','#','9','0'};
int count1,count2;
int x1,x2;
int k=0;
char c[20];
char string[20];
char alpha;
int i=0;

char decodeMorse(char* p)
{
    int start=0;
    int i;
    char k,character;
    for(i=0;i<strlen(p);i++)
    {
        k=string[i];
        if(k=='.')
        {
            start=(2*start)+1;    
        }   
        else if(k=='-')
        {
            start=(2*start)+2;       
        }   
    }    
    //lcd_gotoxy(0,0);
    character=array[start];
    //lcd_putchar(character);
    return character;
}
// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{            
        if(k!=0)
        {
             k++;  
             
            if(k%2==1)
            {
                count1=0;
                x1=0; 
            }      
            else if(k%2==0)
            {
                count2=0;
                x2=0;
            }                
        }
}
// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Place your code here  
    if(k!=0&&k!=1)
    {
        if(k%2==1)
        {   
            if(x2==0)
            {
                x2=-1;  
            }
           else if(x2>=1&&x2<3)
            {
                string[i]='.';
                i++;      
                x2=-1;
            }    
        else if(x2>=3&&x2<=5)
            {               
                string[i]='-';
                i++;  
                x2=-1;          
            }              
            count1++;
            //lcd_clear();
            itoa(x1,c);
            //lcd_puts("Count1=");
            lcd_gotoxy(14,0);
            lcd_puts(c);   
            if(count1==20)
            {     
                x1++;
                count1=0;
            }     
        } 
         else if(k%2==0)
        {   
            if(x1>=0&&x1<3)
            {
                      x1=-1;
            }                        
            else if(x1>=3&&x1<7)
            {                   
               // lcd_clear();
                alpha=decodeMorse(string);
                lcd_gotoxy(0,0);
                lcd_putchar(alpha);
                x1=-1;
                //delay_ms(200);               
            }                         
            else if(x1>=7&&x1<=10)
            {   
                lcd_putchar(' ');
                x1=-1;               
            }                    
            else if(x1>10)
            {
                lcd_puts("COMPLETED");
                x1=-1;          
            }  
            count2++;
            //lcd_clear();
            itoa(x2,c);
            //lcd_puts("Count2=");
            lcd_gotoxy(14,0);
            lcd_puts(c); 
            if(count2==20)
            {     
                x2++;
                count2=0;
            }        
        }  
    }                 
   }
// Declare your global variables here
void main(void)
{
// Declare your local variables here
// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0x00;
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x00;
// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;
// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0x00;
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 31.250 kHz
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x04;
TCNT0=0x00;
OCR0=0x00;
// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;
// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;
// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Any change
// INT1: Off
// INT2: Off
GICR|=0x40;
MCUCR=0x01;
MCUCSR=0x00;
GIFR=0x40;
// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x01;
// USART initialization
// USART disabled
UCSRB=0x00;
// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;
// ADC initialization
// ADC disabled
ADCSRA=0x00;
// SPI initialization
// SPI disabled
SPCR=0x00;
// TWI initialization
// TWI disabled
TWCR=0x00;
// Alphanumeric LCD initialization
// Connections specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 4
// D5 - PORTA Bit 5
// D6 - PORTA Bit 6
// D7 - PORTA Bit 7
// Characters/line: 16
lcd_init(16);
// Global enable interrupts
#asm("sei")
DDRA=0xff;
DDRB=0xff;
PORTB=0x00;             
DDRD=0x00;
PORTD=0xff;
k=1;
lcd_clear();
while (1)
      {
      // Place your code here
      }
}

